help(package='xtable')
doInstall <- TRUE  # Change to FALSE if you don't want packages installed.
toInstall <- c("sna", "ggplot2", "Hmisc", "reshape2","Cairo","rmmseg4j","Rwordseg")
if(doInstall){install.packages(toInstall, repos = "http://cran.r-project.org")}
toInstall <- c("sna", "ggplot2", "Hmisc", "reshape2","Cairo","rmmseg4j","Rwordseg")
if(doInstall){install.packages(toInstall, repos = "http://R-Forge.R-project.org")}
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
install.packages(toInstall, repos = "http://R-Forge.R-project.org")
lapply(toInstall, library, character.only = TRUE)
txt <- readLines("/home/poemcao/files/why.txt"), what="char", encoding="UTF-8");
txt <- readLines("/home/poemcao/files/why.txt")
head(txt)
txt=txt[txt !=" "]
a1 <- importSogouScel("/home/poemcao/files/成都市地名.scel")
library('Rwordseg')
a1 <- importSogouScel("/home/poemcao/files/成都市地名.scel")
attributes(a1)
installDict("成都市地名.scel", dictname = "chengdu")
installDict("/home/poemcao/files/成都市地名.scel", dictname = "chengdu")
library('Rwordseg')
listDict()
txt1=lapply(X=txt,FUN=segmentCN)
txt <- readLines("/home/poemcao/files/why.txt")
doInstall <- TRUE  # Change to FALSE if you don't want packages installed.
toInstall <- c("sna", "ggplot2", "Hmisc", "reshape2","Cairo","rmmseg4j","Rwordseg")
lapply(toInstall, library, character.only = TRUE)
txt <- readLines("/home/poemcao/files/why.txt")
head(txt)
txt=txt[txt !=" "]
head(txt)
library('Rwordseg')
listDict()
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
words <- unlist(strsplit(gsub("[[:punct:]]", " ", tolower(txt)), "[[:space:]]+"));
head(words)
g.start <- 1;
g.end <- length(words) - 1;
assocs <- matrix(nrow=g.end, ncol=2)
for (i in g.start:g.end)
{
assocs[i,1] <- words[i];
assocs[i,2] <- words[i+1];
print(paste("Pass #", i, " of ", g.end, ". ", "Node word is ", toupper(words[i]), ".", sep=""));
}
g.assocs <- graph.data.frame(assocs, directed=F)
?graph.data.frame
??graph.data.frame
toInstall <- c("igraph","sna", "ggplot2", "Hmisc", "reshape2","Cairo","rmmseg4j","Rwordseg")
lapply(toInstall, library, character.only = TRUE)
g.assocs <- graph.data.frame(assocs, directed=F)
fix(g.assocs)
adjacencyMatrix <- g.assocs[1, , ]
layoutCoordinates <- gplot(adjacencyMatrix)  # Get graph layout coordinates
fix(g.assocs)
fix(adjacencyMatrix)
data(coleman)  # Load a high school friendship network
fix(coleman)
g.assocs <- graph.data.frame(assocs, directed=F)
layoutCoordinates <- gplot(assocs)
rstudio::viewData(assocs)
head(words)
r
words
table(words)
hist(words)
v=table(unlist(words))
v=sort(v,deceasing=F)
head(v)
v=sort(v,deceasing=T)
v=sort(v,decreasing=T)
head(v)
barplot(names(v),freq=v)
barplot(v)
str(v)
mode(v)
type(v)
str(v)
barplot(v[v >= 30 ])
barplot(v[v >= 30 & v <= 100])
barplot(v[v >= 30 & v <= 100],horiz=T)
barplot(v[v >= 30 & v <= 90],horiz=T)
barplot(v[v >= 50 & v <= 90],horiz=T)
insertWords("王经理€")
insertWords("王经理")
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
words <- unlist(strsplit(gsub("[[:punct:]]", " ", tolower(txt)), "[[:space:]]+"));
head(words)
v=table(unlist(words))
v=sort(v,decreasing=T)
head(v)
words <- unlist(strsplit(txt)," ");
words <- unlist(strsplit(txt," "));
?strsplit
words <- unlist(strsplit(txt," "))
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
txt=lapply(X=txt,FUN=segmentCN)
txt <- readLines("/home/poemcao/files/why.txt")
head(txt)
txt=txt[txt !=" "]
insertWords("王经理")
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
words <- unlist(strsplit(txt," "))
head(words)
txt <- readLines("/home/poemcao/files/why.txt")
head(txt)
txt=txt[txt !=" "]
insertWords("王经理")
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
word=lapply(X=txt,FUN=strsplit," ")
words=lapply(X=txt,FUN=strsplit," ")
head(words)
v=table(unlist(words))
v=sort(v,decreasing=T)
head(v)
barplot(v[v >= 50 & v <= 90],horiz=T)
barplot(v,horiz=T)
barplot(v[v>10],horiz=T)
barplot(v[v>20],horiz=T)
barplot(v[v>30],horiz=T)
barplot(v[v>30 & v<150],horiz=T)
barplot(v[v>30 & v<100],horiz=T)
barplot(v[v>50 & v<150],horiz=T)
barplot(v[v>100 & v<150],horiz=T)
barplot(v[v>30 & v < 100],horiz=T)
barplot(v[v>30 & v < 70],horiz=T)
head(v)
v
g.start <- 1;
g.end <- length(words) - 1;
assocs <- matrix(nrow=g.end, ncol=2)
for (i in g.start:g.end)
{
assocs[i,1] <- words[i];
assocs[i,2] <- words[i+1];
print(paste("Pass #", i, " of ", g.end, ". ", "Node word is ", toupper(words[i]), ".", sep=""));
}
head(words)
words=unlist(lapply(X=txt,FUN=strsplit," "))
head(words)
g.start <- 1;
g.end <- length(words) - 1;
assocs <- matrix(nrow=g.end, ncol=2)
for (i in g.start:g.end)
{
assocs[i,1] <- words[i];
assocs[i,2] <- words[i+1];
print(paste("Pass #", i, " of ", g.end, ". ", "Node word is ", toupper(words[i]), ".", sep=""));
}
g.assocs <- graph.data.frame(assocs, directed=F)
plot(g.assocs)
layoutCoordinates <- gplot(assocs)
library(sna)
in.str<-rnorm(20,0,3)
out.str<-rnorm(20,0,3)
fix(in.str)
tie.str<-outer(out.str,in.str,"+")
tie.p<-apply(tie.str,c(1,2),function(a){1/(1+exp(-a))})
g<-rgraph(20,tprob=tie.p)
plot(g)
p1<-pstar(g,effects="outdegree")
p2<-pstar(g,effects=c("outdegree","indegree"))
p3<-pstar(g,effects=c("outdegree","indegree","mutuality"))
extractAIC(p1)
extractAIC(p2)
extractAIC(p3)
library(ggplot2)
library(maps) # For map data
world_map <- map_data("world")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", colour="black")
ggplot(world_map, aes(x=long, y=lat, group=group)) +
geom_path()
east_asia <- map_data("world", region=c("Japan", "China", "North Korea",
"South Korea"))
ggplot(east_asia, aes(x=long, y=lat, group=group, fill=region)) +
geom_polygon(colour="black") +
scale_fill_brewer(palette="Set1")
data('world')
data(worldMapEnv)
rstudio::viewData(world_map)
data(world.cities)
rstudio::viewData(world.cities)
map("world", "China")
map.cities(country = "China", capitals = 2)
map.cities(country = "China")
china = map_data('world',region='China')
ggplot(china, aes(x=long, y=lat, fill=region)) +
geom_polygon(colour="black") +
scale_fill_brewer(palette="Set1")
ggplot(china, aes(x=long, y=lat, fill=region)) +
geom_polygon(colour="black")
ggplot(china, aes(x=long, y=lat, fill=region))
ggplot(china, aes(x=long, y=lat, fill=region)) +
geom_polygon(colour="black")
ggplot(china, aes(x=long, y=lat)) +
geom_polygon(colour="black")
ggplot(china, aes(x=long, y=lat)) +
geom_polygon()
rstudio::viewData(world.cities)
chinacity = map_data('world.cities',country.etc='China')
?ggplot
ggplot(china, aes(x=long, y=lat)) +
geom_polygon() +
geom_point(data=world_cities,country.etc='China')
data(world.cities)
ggplot(china, aes(x=long, y=lat)) +
geom_polygon() +
geom_point(data=world_cities,country.etc='China')
chinacity = world.cities[country.etc='China']
chinacity = world.cities[country.etc=='China']
chinacity = world.cities[world.cities$country.etc=='China']
chinacity = world.cities[,world.cities$country.etc=='China']
chinacity = subset(world.cities,world.cities$country.etc=='China')
rstudio::viewData(chinacity)
ggplot(china, aes(x=long, y=lat)) +
geom_polygon() +
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
ggplot(china, aes(x=long, y=lat)) +
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
ggplot(china, aes(x=long, y=lat)) +
geom_polygon( colour="black")
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
ggplot(china, aes(x=long, y=lat)) +
geom_polygon( colour="black")+
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
china = map_data('world',region='China')
ggplot(china, aes(x=long, y=lat)) +
geom_polygon( colour="black")+
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
ggplot(china, aes(x=long, y=lat,fill='region')) +
geom_polygon( colour="black")+
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue',size=3))
ggplot(china, aes(x=long, y=lat,fill='region')) +
geom_polygon( colour="black")+
geom_point(data=chinacity,aes(x=long,y=lat,colour='blue'))
ggplot(china, aes(x=long, y=lat)) +
geom_polygon()
ggplot(east_asia, aes(x=long, y=lat)) +
geom_polygon()
cs = read.table(https://docs.google.com/spreadsheet/ccc?key=0AonYZs4MzlZbdHdMRVV6MEg4R0FqQzVCcU1kWnF4RUE#gid=1)
cs = read.table('https://docs.google.com/spreadsheet/ccc?key=0AonYZs4MzlZbdHdMRVV6MEg4R0FqQzVCcU1kWnF4RUE#gid=1')
cs =read.csv('/home/poemcao/下载/Gambling and areas of unemployment - HIGH UNEMPLOYMENT.csv')
rstudio::viewData(cs)
str(cs)
ls(cs)
cs$Gross.Amount.Gambled...
plot(cs$Gross.Amount.Gambled...)
bar(cs$Gross.Amount.Gambled...)
barplot(cs$Gross.Amount.Gambled...)
plot(cs)
cs =read.csv('/home/poemcao/下载/Gambling and areas of unemployment - HIGH UNEMPLOYMENT.csv')
str(cs)
ls(cs)
cs =read.csv('/home/poemcao/下载/Gambling and areas of unemployment - HIGH UNEMPLOYMENT.csv')
str(cs)
ls(cs)
cs =read.csv('/home/poemcao/下载/Gambling and areas of unemployment - HIGH UNEMPLOYMENT.csv')
str(cs)
ls(cs)
？iris
??iris
data(iris)
rstudio::viewData(iris)
data(cars)
rstudio::viewData(cars)
rstudio::viewData(car)
data(mtcars)
rstudio::viewData(mtcars)
rstudio::viewData(iris)
v=data(iris)
write.csv(v,'/home/poemcao')
write.csv(v,'/home/poemcao/iris.csv')
write.csv(iris,'/home/poemcao/iris.csv')
plot(iris)
boxplot(Sepal.Length ~ Species,data = iris)
boxplot(Sepal.Length ~ Species,data = iris)
histogram(~Sepal.Length|Species,data = iris)
install.packages('ggplot2')
install.packages('lattice')
rstudio::viewData(iris)
lmiris = lm (iris$Petal.Length~iris$Sepal.Length+iris$Sepal.Width+iris$Petal.Width)
summary(lmiris)
library(lattice)
histogram(~Sepal.Length|Species,data = iris)
source("http://www.r-statistics.com/wp-content/uploads/2012/01/source_https.r.txt") # Making sure we can source code from github
source_https("https://raw.github.com/talgalili/R-code-snippets/master/clustergram.r")
library(ggplot2)
ggplot(iris$Petal.Length~iris$Petal.Width,data=iris)+
geom_boxplot()
?ggplot
ggplot(iris,aes(x=Petal.Length,y=Petal.With))+
geom_boxplot()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_boxplot()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),colour=species)+
geom_point()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),fill=species)+
geom_point()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),fill=Species)+
geom_point()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),group=Species)+
geom_point()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),colour=Species)+
geom_point()
class(iris)
colnames(iris)
str(iris)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(color=Species)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(color=Species,data=iris)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),color=Species)+
geom_bar()
ggplot(iris,aes(x=Petal.Length,y=Petal.Width),color=Species)+
geom_boxplot()
ggplot(iris,aes(x=Species,y= .))+
geom_boxplot()
ggplot(iris,aes(x=Species,y=c(Petal.Length,Petal.Width)))+
geom_boxplot()
ggplot(iris,aes(x=Species,y=c(Petal.Length)))+
geom_boxplot()
ggplot(iris,aes(x=Species,y=c(Petal.Length)))+
geom_line()
aovlm = aov(iris$Species~iris$Petal.Length+iris$Petal.Width+iris$Sepal.Length+iris$Sepal.Width)
aovlm = aov(as.character(iris$Species)~iris$Petal.Length+iris$Petal.Width+iris$Sepal.Length+iris$Sepal.Width)
lm = glm(iris$Species~iris$Petal.Length+iris$Petal.Width+iris$Sepal.Length+iris$Sepal.Width,family = "binomial")
?glm
plot(iris$Sepal.Length,type='l')
plot(iris)
data(iris3)
fix(iris3)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
Sp = rep(c("s","c","v"), rep(50,3)))
rstudio::viewData(Iris)
train <- sample(1:150, 75)
train
?sample
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
library(MASS)
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
predict(z, Iris[-train, ])$class
table(Iris$Sp[train])
Iris$Sp[train]
rstudio::viewData(Iris)
(
class(iris)
)
class(iris)
colnames(iris)
str(iris)
iris$Petal.Length
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width, main="Edgar Anderson's Iris Data")
plot(iris$Petal.Length, iris$Petal.Width, pch=c(23,24,25)[unclass(iris$Species)], main="Edgar Anderson's Iris Data")
plot(iris$Petal.Length, iris$Petal.Width, pch=21, bg=c("red","green3","blue")[unclass(iris$Species)], main="Edgar Anderson's Iris Data")
boxplot(Sepal.Length ~ Species,data = iris)
library(lattice)
histogram(~Sepal.Length|Species,data = iris)
attach(iris)
hist(Sepal.Length[Species=="setosa"],main="setosa",xlab=NA)
boxplot(Sepal.Length[Species=="virginica"],main="virginica",xlab=NA)
library(MASS)
train <- sample(1:150, 75)
train
table(Iris$Sp[train])
rstudio::viewData(iris)
summary(iris$Species)
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
predict(z, Iris[-train, ])$class
(z1 <- update(z, . ~ . - Petal.W.))
table(iris$Species[train])
z <- lda(Species ~ ., iris, prior = c(1,1,1)/3, subset = train)
predict(z, iris[-train, ])$class
summary(iris)
table(iris$Species[train])
Iris$Sp[train]
iris$Sp[train]
summary(iris)
pro = data.frame(
Sepal.length = sample(4.3:7.9,5)
Sepal.Width = sample(2:4.4,5)
pro = data.frame(
Sepal.length = sample(4.3:7.9,5),
Sepal.Width = sample(2:4.4,5),
Petal.Length = sample(1:6.9,5),
Petal.Width = sample(0.1:2.5,5))
?sample
pro = data.frame(
Sepal.length = sample(4.3:7.9,5,repalce=T),
Sepal.Width = sample(2:4.4,5,repalce=T),
Petal.Length = sample(1:6.9,5,repalce=T),
Petal.Width = sample(0.1:2.5,5,repalce=T))
pro = data.frame(
Sepal.length = sample(4.3:7.9,5,replace=T),
Sepal.Width = sample(2:4.4,5,replace=T),
Petal.Length = sample(1:6.9,5,replace=T),
Petal.Width = sample(0.1:2.5,5,replace=T))
rstudio::viewData(pro)
predict(pro, pro[-train, ])$class
predict(z, pro[-train, ])$class
summary(z)
plot(z)
(z1 <- update(z, . ~ . - Petal.Width))
predict(z1, iris[-train, ])$class
predict(z, iris[-train, ])$class
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
predict2 = predict(z1, iris[-train, ])$class)
rstudio::viewData(compare)
compare = data.frame(
iris origin = iris$Speical,
predict1 = predict(z, iris[-train, ])$class,
predict2 = predict(z1, iris[-train, ])$class)
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
iris origin = iris$Speies,
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
irisorigin = iris$Speies,
predict2 = predict(z1, iris[-train, ])$class)
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
irisorigin = iris$Speies[-train, ],
predict2 = predict(z1, iris[-train, ])$class)
iris$Speies[-train,]
iris$Speies
iris
iris$Species
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
irisorigin = iris$Species[-train,],
predict2 = predict(z1, iris[-train, ])$class)
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
irisorigin = iris$Species[-train, ],
predict2 = predict(z1, iris[-train, ])$class)
iris$Species[-train, ]
compare = data.frame(
predict1 = predict(z, iris[-train, ])$class,
irisorigin = iris[-train, ]$Species,
predict2 = predict(z1, iris[-train, ])$class)
rstudio::viewData(compare)
plot.predict
?plot.predict
plot(predict)
txt <- readLines("/home/poemcao/files/miz.txt")
head(txt)
txt <- readLines("/home/poemcao/files/miz.txt"，encoding='GB18030')
txt <- readLines("/home/poemcao/files/miz.txt",encoding='GB18030')
head(txt)
txt <- readLines("/home/poemcao/files/mz.txt",encoding='GB18030')
txt <- readLines("/home/poemcao/files/mz.txt",encoding='UTF-8')
?readLines
?read
??read
?scan
txt <- scan("/home/poemcao/files/mz.txt",encoding='UTF-8')
txt <- scan("/home/poemcao/files/mz.txt")
txt <- scan("/home/poemcao/files/mz.txt", what = double(), nmax = -1, n = -1,skip= 1, quiet= TRUE)
txt <- scan("/home/poemcao/files/mz.txt", what = double(), nmax = -1,skip= 1, quiet= TRUE)
txt <- readLines("/home/poemcao/files/mz.txt")
txt <- readLines("/home/poemcao/files/mz.txt")
txt <- readLines("/home/poemcao/files/mz.txt")
txt <- readLines("/home/poemcao/files/pt.txt")
txt <- read.csv("/home/poemcao/files/pt.csv")
txt <- readLines("/home/poemcao/files/pt.csv.txt")
head(txt)
head(txt)
txt
miztxt=txt[txt !=" "]
head(miztxt)
library('Rwordseg')
listDict()
txt=lapply(X=txt,FUN=segmentCN)
head(txt)
words=unlist(lapply(X=txt,FUN=strsplit," "))
head(words)
v=table(unlist(words))
v=sort(v,decreasing=T)
v
head(v)
str(v)
barplot(v[v>1000& v < 2000],horiz=T)
d=data.frame(word=names(v),freq=v)
rstudio::viewData(d)
kabu=readLines('http://read.goodweb.cn/news/news_view.asp?newsid=2933')
kabu
data(cars)
ls(cars)
plot(cars$dist,cars$speed,main="图片中文")
library(slidify)
setwd('/home/poemcao/')
slidify("index.Rmd")
setwd('/home/poemcao/slides')
slidify("index.Rmd")
publish(user = "poemcao", repo = "slides")
